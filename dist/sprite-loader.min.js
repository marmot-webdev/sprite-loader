/**!
 * sprite-loader
 * @version: 1.0.0
 * @author: Serhii Babakov <marmot.webdev@gmail.com>
 * @url: https://github.com/marmot-webdev/sprite-loader
 * @license: MIT
 */
var SpriteLoader=function(){"use strict";const t=t=>"Object"===(t=>Object.prototype.toString.call(t).slice(8,-1))(t);function e(n){for(var o=arguments.length,i=new Array(o>1?o-1:0),r=1;r<o;r++)i[r-1]=arguments[r];if(!i.length)return n;const s=i.shift();if(t(n)&&t(s))for(const[o,i]of Object.entries(s))n[o]=t(i)?e(n[o]||{},i):i;return e(n,...i)}var n={container:null,extractor:null,sprites:{global:[],local:[]},root:"",dirname:"",extname:".svg",prefix:"",onload:null};return class{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.options=e({},n,t),this.container=this.getContainer(),this.initialize()}initialize(){const{onload:t}=this.options,e=this.getConfigs(),n=this.getMissingSpriteConfigs(e);n.length&&this.loadSprites(n),"function"==typeof t&&t(e.map((t=>t.url)))}getContainer(){const{container:t}=this.options;return"function"==typeof t?t():function(){const t=document.createElement("div");return t.hidden=!0,document.body.prepend(t),t}()}getOption(t,e){return t[e]||this.options[e]}getConfigs(){var t;const{extractor:e,sprites:n}=this.options,o="function"==typeof e?e():(null===(i=document.documentElement,r="sprites",t=null!==(s=null===(a=i.dataset[r])||void 0===a?void 0:a.trim())&&void 0!==s?s:null)||void 0===t?void 0:t.split("|"))||[];var i,r,s,a;return[...n.global,...n.local.filter((t=>o.some((e=>t.basename.startsWith(e+this.getOption(t,"extname"))))))].map((t=>{const{basename:e,onload:n}=t,o=this.getOption(t,"prefix")+e,i=this.getOption(t,"root")||document.baseURI,r=this.getOption(t,"dirname"),s=r.endsWith("/")?"":"/";return{url:new URL(r+s+e,i),storageKey:o,...n&&{onload:n}}}))}getMissingSpriteConfigs(t){const e=[];for(const n of t){const t=localStorage.getItem(n.storageKey);t?this.insertSprite(t,n):e.push(n)}return e}insertSprite(t,e){this.container.insertAdjacentHTML("beforeend",t),"function"==typeof e.onload&&e.onload(e.url)}async loadSprites(t){try{const e=(await Promise.all(t.map((t=>fetch(t.url.href))))).entries();for(const[n,o]of e)if(o.ok){const e=await o.text(),i=t[n];this.insertSprite(e,i),localStorage.setItem(i.storageKey,e)}}catch(t){console.error(`Error loading sprite: ${t}`)}}}}();
